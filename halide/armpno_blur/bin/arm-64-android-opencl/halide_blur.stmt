module name=halide_blur, target=arm-64-android-opencl
external_plus_metadata func halide_blur (input, blur_y) {
assert(((uint64)reinterpret(((buffer_t *))input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
assert(((uint64)reinterpret(((buffer_t *))blur_y.buffer) != (uint64)0), halide_error_buffer_argument_is_null("blur_y"))
let blur_y = ((void *))_halide_buffer_get_host(((buffer_t *))blur_y.buffer)
let blur_y.type = (uint32)_halide_buffer_get_type(((buffer_t *))blur_y.buffer)
let blur_y.dimensions = _halide_buffer_get_dimensions(((buffer_t *))blur_y.buffer)
let blur_y.min.0 = _halide_buffer_get_min(((buffer_t *))blur_y.buffer, 0)
let blur_y.extent.0 = _halide_buffer_get_extent(((buffer_t *))blur_y.buffer, 0)
let blur_y.stride.0 = _halide_buffer_get_stride(((buffer_t *))blur_y.buffer, 0)
let blur_y.min.1 = _halide_buffer_get_min(((buffer_t *))blur_y.buffer, 1)
let blur_y.extent.1 = _halide_buffer_get_extent(((buffer_t *))blur_y.buffer, 1)
let blur_y.stride.1 = _halide_buffer_get_stride(((buffer_t *))blur_y.buffer, 1)
let input = ((void *))_halide_buffer_get_host(((buffer_t *))input.buffer)
let input.type = (uint32)_halide_buffer_get_type(((buffer_t *))input.buffer)
let input.dimensions = _halide_buffer_get_dimensions(((buffer_t *))input.buffer)
let input.min.0 = _halide_buffer_get_min(((buffer_t *))input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent(((buffer_t *))input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(((buffer_t *))input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(((buffer_t *))input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent(((buffer_t *))input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(((buffer_t *))input.buffer, 1)
let blur_y.extent.0.required.s = (min((min(((blur_y.extent.0 + -1)/2), ((((blur_y.extent.0 + -1)/64)*32) + 31))*2), (blur_y.extent.0 + -2)) - min((min(((blur_y.extent.0 + -1)/2), 31)*2), (blur_y.extent.0 + 60)))
let blur_y.min.0.required.s = min((min(((blur_y.extent.0 + -1)/2), 31)*2), (blur_y.extent.0 + 60))
let blur_y.extent.1.required.s = (min((((blur_y.extent.1 + -1)/8)*8), (blur_y.extent.1 + -8)) - min(blur_y.extent.1, 8))
let input.extent.0.required.s.s = min(((min(((blur_y.extent.0 + -1)/2), ((((blur_y.extent.0 + -1)/64)*32) + 31))*2) + 2), blur_y.extent.0)
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))blur_y.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))blur_y.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))blur_y.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 1, 16, 2, ((halide_dimension_t *))make_struct(((blur_y.min.0 + blur_y.min.0.required.s) + -62), (blur_y.extent.0.required.s + 64), 1, 0, ((min(blur_y.extent.1, 8) + blur_y.min.1) + -8), (blur_y.extent.1.required.s + 16), (blur_y.extent.0.required.s + 64), 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query(((buffer_t *))input.buffer)) {
 ((halide_buffer_t *))_halide_buffer_init(((halide_buffer_t *))input.buffer, ((halide_dimension_t *))_halide_buffer_get_shape(((halide_buffer_t *))input.buffer), ((void *))reinterpret((uint64)0), (uint64)0, ((halide_device_interface_t *))reinterpret((uint64)0), 1, 16, 2, ((halide_dimension_t *))make_struct(((blur_y.min.0 + blur_y.min.0.required.s) + -62), ((input.extent.0.required.s.s - blur_y.min.0.required.s) + 64), 1, 0, ((min(blur_y.extent.1, 8) + blur_y.min.1) + -8), (max(blur_y.extent.1, 8) + 2), ((input.extent.0.required.s.s - blur_y.min.0.required.s) + 64), 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query(((buffer_t *))blur_y.buffer) || (uint1)_halide_buffer_is_bounds_query(((buffer_t *))input.buffer))) {
 assert((blur_y.type == (uint32)69633), halide_error_bad_type("Output buffer blur_y", blur_y.type, (uint32)69633))
 assert((blur_y.dimensions == 2), halide_error_bad_dimensions("Output buffer blur_y", blur_y.dimensions, 2))
 assert((input.type == (uint32)69633), halide_error_bad_type("Input buffer input", input.type, (uint32)69633))
 assert((input.dimensions == 2), halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
 assert(((62 <= blur_y.min.0.required.s) && ((((blur_y.min.0 + blur_y.min.0.required.s) + blur_y.extent.0.required.s) + 2) <= (blur_y.extent.0 + blur_y.min.0))), halide_error_access_out_of_bounds("Output buffer blur_y", 0, ((blur_y.min.0 + blur_y.min.0.required.s) + -62), (((blur_y.min.0 + blur_y.min.0.required.s) + blur_y.extent.0.required.s) + 1), blur_y.min.0, ((blur_y.extent.0 + blur_y.min.0) + -1)))
 assert((0 <= blur_y.extent.0), halide_error_buffer_extents_negative("Output buffer blur_y", 0, blur_y.extent.0))
 assert(((8 <= blur_y.extent.1) && ((((min(blur_y.extent.1, 8) + blur_y.min.1) + blur_y.extent.1.required.s) + 8) <= (blur_y.extent.1 + blur_y.min.1))), halide_error_access_out_of_bounds("Output buffer blur_y", 1, ((min(blur_y.extent.1, 8) + blur_y.min.1) + -8), (((min(blur_y.extent.1, 8) + blur_y.min.1) + blur_y.extent.1.required.s) + 7), blur_y.min.1, ((blur_y.extent.1 + blur_y.min.1) + -1)))
 assert(((input.min.0 <= blur_y.min.0) && (((blur_y.min.0 + input.extent.0.required.s.s) + 2) <= (input.extent.0 + input.min.0))), halide_error_access_out_of_bounds("Input buffer input", 0, blur_y.min.0, ((blur_y.min.0 + input.extent.0.required.s.s) + 1), input.min.0, ((input.extent.0 + input.min.0) + -1)))
 assert((0 <= input.extent.0), halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert(((input.min.1 <= blur_y.min.1) && (((blur_y.extent.1 + blur_y.min.1) + 2) <= (input.extent.1 + input.min.1))), halide_error_access_out_of_bounds("Input buffer input", 1, blur_y.min.1, ((blur_y.extent.1 + blur_y.min.1) + 1), input.min.1, ((input.extent.1 + input.min.1) + -1)))
 assert((0 <= input.extent.1), halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert((blur_y.stride.0 == 1), halide_error_constraint_violated("blur_y.stride.0", blur_y.stride.0, "1", 1))
 assert((input.stride.0 == 1), halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 let blur_y.total_extent.1 = (int64(blur_y.extent.1)*int64(blur_y.extent.0))
 let input.total_extent.1 = (int64(input.extent.1)*int64(input.extent.0))
 assert(((uint64)abs(int64(blur_y.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("blur_y", (uint64)abs(int64(blur_y.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(blur_y.extent.1)*int64(blur_y.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("blur_y", (uint64)abs((int64(blur_y.extent.1)*int64(blur_y.stride.1))), (uint64)2147483647))
 assert((blur_y.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("blur_y", blur_y.total_extent.1, (int64)2147483647))
 assert(((uint64)abs(int64(input.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", (uint64)abs(int64(input.extent.0)), (uint64)2147483647))
 assert(((uint64)abs((int64(input.extent.1)*int64(input.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", (uint64)abs((int64(input.extent.1)*int64(input.stride.1))), (uint64)2147483647))
 assert((input.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
 produce blur_y {
  let halide_copy_to_device_result = halide_copy_to_device(((halide_buffer_t *))blur_y.buffer, ((halide_device_interface_t *))halide_opencl_device_interface())
  assert((halide_copy_to_device_result == 0), halide_copy_to_device_result)
  let halide_copy_to_device_result$1 = halide_copy_to_device(((halide_buffer_t *))input.buffer, ((halide_device_interface_t *))halide_opencl_device_interface())
  assert((halide_copy_to_device_result$1 == 0), halide_copy_to_device_result$1)
  let t146 = (input.stride.1*2)
  let t147 = (blur_y.min.1*blur_y.stride.1)
  let t148 = (input.min.1*input.stride.1)
  let t149 = (blur_y.extent.1 + blur_y.min.1)
  let t150 = (t149 + -8)
  let t151 = (t149 + -7)
  let t152 = (t149 + -6)
  let t153 = (t149 + -5)
  let t154 = (t149 + -4)
  let t155 = (t149 + -3)
  let t156 = (t149 + -2)
  let t157 = (t149 + -1)
  let t110 = ((blur_y.extent.1 + 7)/8)
  let t111 = ((blur_y.extent.0 + 63)/64)
  let t128 = ((blur_y.extent.0 + -63)/2)
  let t112 = (blur_y.extent.1/8)
  let t113 = (blur_y.extent.0/64)
  let t144 = ((((input.stride.1*t157) + blur_y.min.0) - t148) - input.min.0)
  let t145 = ((((blur_y.stride.1*t157) + blur_y.min.0) - t147) - blur_y.min.0)
  let t142 = ((((input.stride.1*t156) + blur_y.min.0) - t148) - input.min.0)
  let t143 = ((((blur_y.stride.1*t156) + blur_y.min.0) - t147) - blur_y.min.0)
  let t140 = ((((input.stride.1*t155) + blur_y.min.0) - t148) - input.min.0)
  let t141 = ((((blur_y.stride.1*t155) + blur_y.min.0) - t147) - blur_y.min.0)
  let t138 = ((((input.stride.1*t154) + blur_y.min.0) - t148) - input.min.0)
  let t139 = ((((blur_y.stride.1*t154) + blur_y.min.0) - t147) - blur_y.min.0)
  let t136 = ((((input.stride.1*t153) + blur_y.min.0) - t148) - input.min.0)
  let t137 = ((((blur_y.stride.1*t153) + blur_y.min.0) - t147) - blur_y.min.0)
  let t134 = ((((input.stride.1*t152) + blur_y.min.0) - t148) - input.min.0)
  let t135 = ((((blur_y.stride.1*t152) + blur_y.min.0) - t147) - blur_y.min.0)
  let t132 = ((((input.stride.1*t151) + blur_y.min.0) - t148) - input.min.0)
  let t133 = ((((blur_y.stride.1*t151) + blur_y.min.0) - t147) - blur_y.min.0)
  let t130 = ((((input.stride.1*t150) + blur_y.min.0) - t148) - input.min.0)
  let t131 = ((((blur_y.stride.1*t150) + blur_y.min.0) - t147) - blur_y.min.0)
  let t114 = ((blur_y.min.0 - t148) - input.min.0)
  let t120 = (0 - t147)
  let t129 = (blur_y.extent.0 + -2)
  gpu_block<OpenCL> (blur_y.s0.y.y.y.__block_id_y, 0, t110) {
   gpu_block<OpenCL> (blur_y.s0.x.x.x.__block_id_x, 0, t111) {
    gpu_thread<OpenCL> (.__thread_id_y, 0, 1) {
     gpu_thread<OpenCL> (.__thread_id_x, 0, 32) {
      if ((blur_y.s0.y.y.y.__block_id_y < t112)) {
       if ((blur_y.s0.x.x.x.__block_id_x < t113)) {
        blur_y[ramp(((((blur_y.s0.x.x.x.__block_id_x*32) + .__thread_id_x)*2) + ((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1)*blur_y.stride.1) + t120)), 1, 2)] = 
          let t86 = ((((blur_y.s0.x.x.x.__block_id_x*32) + .__thread_id_x)*2) + ((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1)*input.stride.1) + t114)) in
          ((((input[ramp(((input.stride.1 + t86) + 1), 1, 2)] + (input[ramp(((input.stride.1 + t86) + 2), 1, 2)] + input[ramp((input.stride.1 + t86), 1, 2)]))/x2((uint16)3)) + (((input[ramp(((t146 + t86) + 1), 1, 2)] + (input[ramp(((t146 + t86) + 2), 1, 2)] + input[ramp((t146 + t86), 1, 2)]))/x2((uint16)3)) + ((input[ramp((t86 + 1), 1, 2)] + (input[ramp((t86 + 2), 1, 2)] + input[ramp(t86, 1, 2)]))/x2((uint16)3))))/x2((uint16)3))

        blur_y[ramp(((((blur_y.s0.x.x.x.__block_id_x*32) + .__thread_id_x)*2) + (((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 1)*blur_y.stride.1) + t120)), 1, 2)] = 
          let t87 = ((((blur_y.s0.x.x.x.__block_id_x*32) + .__thread_id_x)*2) + (((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 1)*input.stride.1) + t114)) in
          ((((input[ramp(((input.stride.1 + t87) + 1), 1, 2)] + (input[ramp(((input.stride.1 + t87) + 2), 1, 2)] + input[ramp((input.stride.1 + t87), 1, 2)]))/x2((uint16)3)) + (((input[ramp(((t146 + t87) + 1), 1, 2)] + (input[ramp(((t146 + t87) + 2), 1, 2)] + input[ramp((t146 + t87), 1, 2)]))/x2((uint16)3)) + ((input[ramp((t87 + 1), 1, 2)] + (input[ramp((t87 + 2), 1, 2)] + input[ramp(t87, 1, 2)]))/x2((uint16)3))))/x2((uint16)3))

        blur_y[ramp(((((blur_y.s0.x.x.x.__block_id_x*32) + .__thread_id_x)*2) + (((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 2)*blur_y.stride.1) + t120)), 1, 2)] = 
          let t88 = ((((blur_y.s0.x.x.x.__block_id_x*32) + .__thread_id_x)*2) + (((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 2)*input.stride.1) + t114)) in
          ((((input[ramp(((input.stride.1 + t88) + 1), 1, 2)] + (input[ramp(((input.stride.1 + t88) + 2), 1, 2)] + input[ramp((input.stride.1 + t88), 1, 2)]))/x2((uint16)3)) + (((input[ramp(((t146 + t88) + 1), 1, 2)] + (input[ramp(((t146 + t88) + 2), 1, 2)] + input[ramp((t146 + t88), 1, 2)]))/x2((uint16)3)) + ((input[ramp((t88 + 1), 1, 2)] + (input[ramp((t88 + 2), 1, 2)] + input[ramp(t88, 1, 2)]))/x2((uint16)3))))/x2((uint16)3))

        blur_y[ramp(((((blur_y.s0.x.x.x.__block_id_x*32) + .__thread_id_x)*2) + (((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 3)*blur_y.stride.1) + t120)), 1, 2)] = 
          let t89 = ((((blur_y.s0.x.x.x.__block_id_x*32) + .__thread_id_x)*2) + (((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 3)*input.stride.1) + t114)) in
          ((((input[ramp(((input.stride.1 + t89) + 1), 1, 2)] + (input[ramp(((input.stride.1 + t89) + 2), 1, 2)] + input[ramp((input.stride.1 + t89), 1, 2)]))/x2((uint16)3)) + (((input[ramp(((t146 + t89) + 1), 1, 2)] + (input[ramp(((t146 + t89) + 2), 1, 2)] + input[ramp((t146 + t89), 1, 2)]))/x2((uint16)3)) + ((input[ramp((t89 + 1), 1, 2)] + (input[ramp((t89 + 2), 1, 2)] + input[ramp(t89, 1, 2)]))/x2((uint16)3))))/x2((uint16)3))

        blur_y[ramp(((((blur_y.s0.x.x.x.__block_id_x*32) + .__thread_id_x)*2) + (((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 4)*blur_y.stride.1) + t120)), 1, 2)] = 
          let t90 = ((((blur_y.s0.x.x.x.__block_id_x*32) + .__thread_id_x)*2) + (((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 4)*input.stride.1) + t114)) in
          ((((input[ramp(((input.stride.1 + t90) + 1), 1, 2)] + (input[ramp(((input.stride.1 + t90) + 2), 1, 2)] + input[ramp((input.stride.1 + t90), 1, 2)]))/x2((uint16)3)) + (((input[ramp(((t146 + t90) + 1), 1, 2)] + (input[ramp(((t146 + t90) + 2), 1, 2)] + input[ramp((t146 + t90), 1, 2)]))/x2((uint16)3)) + ((input[ramp((t90 + 1), 1, 2)] + (input[ramp((t90 + 2), 1, 2)] + input[ramp(t90, 1, 2)]))/x2((uint16)3))))/x2((uint16)3))

        blur_y[ramp(((((blur_y.s0.x.x.x.__block_id_x*32) + .__thread_id_x)*2) + (((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 5)*blur_y.stride.1) + t120)), 1, 2)] = 
          let t91 = ((((blur_y.s0.x.x.x.__block_id_x*32) + .__thread_id_x)*2) + (((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 5)*input.stride.1) + t114)) in
          ((((input[ramp(((input.stride.1 + t91) + 1), 1, 2)] + (input[ramp(((input.stride.1 + t91) + 2), 1, 2)] + input[ramp((input.stride.1 + t91), 1, 2)]))/x2((uint16)3)) + (((input[ramp(((t146 + t91) + 1), 1, 2)] + (input[ramp(((t146 + t91) + 2), 1, 2)] + input[ramp((t146 + t91), 1, 2)]))/x2((uint16)3)) + ((input[ramp((t91 + 1), 1, 2)] + (input[ramp((t91 + 2), 1, 2)] + input[ramp(t91, 1, 2)]))/x2((uint16)3))))/x2((uint16)3))

        blur_y[ramp(((((blur_y.s0.x.x.x.__block_id_x*32) + .__thread_id_x)*2) + (((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 6)*blur_y.stride.1) + t120)), 1, 2)] = 
          let t92 = ((((blur_y.s0.x.x.x.__block_id_x*32) + .__thread_id_x)*2) + (((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 6)*input.stride.1) + t114)) in
          ((((input[ramp(((input.stride.1 + t92) + 1), 1, 2)] + (input[ramp(((input.stride.1 + t92) + 2), 1, 2)] + input[ramp((input.stride.1 + t92), 1, 2)]))/x2((uint16)3)) + (((input[ramp(((t146 + t92) + 1), 1, 2)] + (input[ramp(((t146 + t92) + 2), 1, 2)] + input[ramp((t146 + t92), 1, 2)]))/x2((uint16)3)) + ((input[ramp((t92 + 1), 1, 2)] + (input[ramp((t92 + 2), 1, 2)] + input[ramp(t92, 1, 2)]))/x2((uint16)3))))/x2((uint16)3))

        blur_y[ramp(((((blur_y.s0.x.x.x.__block_id_x*32) + .__thread_id_x)*2) + (((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 7)*blur_y.stride.1) + t120)), 1, 2)] = 
          let t93 = ((((blur_y.s0.x.x.x.__block_id_x*32) + .__thread_id_x)*2) + (((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 7)*input.stride.1) + t114)) in
          ((((input[ramp(((input.stride.1 + t93) + 1), 1, 2)] + (input[ramp(((input.stride.1 + t93) + 2), 1, 2)] + input[ramp((input.stride.1 + t93), 1, 2)]))/x2((uint16)3)) + (((input[ramp(((t146 + t93) + 1), 1, 2)] + (input[ramp(((t146 + t93) + 2), 1, 2)] + input[ramp((t146 + t93), 1, 2)]))/x2((uint16)3)) + ((input[ramp((t93 + 1), 1, 2)] + (input[ramp((t93 + 2), 1, 2)] + input[ramp(t93, 1, 2)]))/x2((uint16)3))))/x2((uint16)3))

       } else {
        let blur_y.s0.x.x.xi.base = min((blur_y.s0.x.x.x.__block_id_x*32), t128)
        let blur_y.s0.x.v0.base.s = min(((.__thread_id_x + blur_y.s0.x.x.xi.base)*2), t129)
        blur_y[ramp((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1)*blur_y.stride.1) + t120) + blur_y.s0.x.v0.base.s), 1, 2)] = ((((input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1) + 1), 1, 2)] + (input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1) + 2), 1, 2)] + input[ramp(((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1), 1, 2)]))/x2((uint16)3)) + (((input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146) + 1), 1, 2)] + (input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146) + 2), 1, 2)] + input[ramp(((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146), 1, 2)]))/x2((uint16)3)) + ((input[ramp(((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + 1), 1, 2)] + (input[ramp(((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + 2), 1, 2)] + input[ramp((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s), 1, 2)]))/x2((uint16)3))))/x2((uint16)3))
        blur_y[ramp(((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 1)*blur_y.stride.1) + t120) + blur_y.s0.x.v0.base.s), 1, 2)] = ((((input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 1)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1) + 1), 1, 2)] + (input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 1)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1) + 2), 1, 2)] + input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 1)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1), 1, 2)]))/x2((uint16)3)) + (((input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 1)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146) + 1), 1, 2)] + (input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 1)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146) + 2), 1, 2)] + input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 1)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146), 1, 2)]))/x2((uint16)3)) + ((input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 1)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + 1), 1, 2)] + (input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 1)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + 2), 1, 2)] + input[ramp(((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 1)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s), 1, 2)]))/x2((uint16)3))))/x2((uint16)3))
        blur_y[ramp(((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 2)*blur_y.stride.1) + t120) + blur_y.s0.x.v0.base.s), 1, 2)] = ((((input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 2)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1) + 1), 1, 2)] + (input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 2)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1) + 2), 1, 2)] + input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 2)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1), 1, 2)]))/x2((uint16)3)) + (((input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 2)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146) + 1), 1, 2)] + (input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 2)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146) + 2), 1, 2)] + input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 2)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146), 1, 2)]))/x2((uint16)3)) + ((input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 2)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + 1), 1, 2)] + (input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 2)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + 2), 1, 2)] + input[ramp(((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 2)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s), 1, 2)]))/x2((uint16)3))))/x2((uint16)3))
        blur_y[ramp(((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 3)*blur_y.stride.1) + t120) + blur_y.s0.x.v0.base.s), 1, 2)] = ((((input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 3)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1) + 1), 1, 2)] + (input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 3)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1) + 2), 1, 2)] + input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 3)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1), 1, 2)]))/x2((uint16)3)) + (((input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 3)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146) + 1), 1, 2)] + (input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 3)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146) + 2), 1, 2)] + input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 3)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146), 1, 2)]))/x2((uint16)3)) + ((input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 3)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + 1), 1, 2)] + (input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 3)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + 2), 1, 2)] + input[ramp(((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 3)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s), 1, 2)]))/x2((uint16)3))))/x2((uint16)3))
        blur_y[ramp(((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 4)*blur_y.stride.1) + t120) + blur_y.s0.x.v0.base.s), 1, 2)] = ((((input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 4)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1) + 1), 1, 2)] + (input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 4)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1) + 2), 1, 2)] + input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 4)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1), 1, 2)]))/x2((uint16)3)) + (((input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 4)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146) + 1), 1, 2)] + (input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 4)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146) + 2), 1, 2)] + input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 4)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146), 1, 2)]))/x2((uint16)3)) + ((input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 4)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + 1), 1, 2)] + (input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 4)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + 2), 1, 2)] + input[ramp(((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 4)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s), 1, 2)]))/x2((uint16)3))))/x2((uint16)3))
        blur_y[ramp(((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 5)*blur_y.stride.1) + t120) + blur_y.s0.x.v0.base.s), 1, 2)] = ((((input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 5)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1) + 1), 1, 2)] + (input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 5)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1) + 2), 1, 2)] + input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 5)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1), 1, 2)]))/x2((uint16)3)) + (((input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 5)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146) + 1), 1, 2)] + (input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 5)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146) + 2), 1, 2)] + input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 5)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146), 1, 2)]))/x2((uint16)3)) + ((input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 5)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + 1), 1, 2)] + (input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 5)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + 2), 1, 2)] + input[ramp(((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 5)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s), 1, 2)]))/x2((uint16)3))))/x2((uint16)3))
        blur_y[ramp(((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 6)*blur_y.stride.1) + t120) + blur_y.s0.x.v0.base.s), 1, 2)] = ((((input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 6)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1) + 1), 1, 2)] + (input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 6)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1) + 2), 1, 2)] + input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 6)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1), 1, 2)]))/x2((uint16)3)) + (((input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 6)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146) + 1), 1, 2)] + (input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 6)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146) + 2), 1, 2)] + input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 6)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146), 1, 2)]))/x2((uint16)3)) + ((input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 6)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + 1), 1, 2)] + (input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 6)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + 2), 1, 2)] + input[ramp(((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 6)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s), 1, 2)]))/x2((uint16)3))))/x2((uint16)3))
        blur_y[ramp(((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 7)*blur_y.stride.1) + t120) + blur_y.s0.x.v0.base.s), 1, 2)] = ((((input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 7)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1) + 1), 1, 2)] + (input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 7)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1) + 2), 1, 2)] + input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 7)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + input.stride.1), 1, 2)]))/x2((uint16)3)) + (((input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 7)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146) + 1), 1, 2)] + (input[ramp(((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 7)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146) + 2), 1, 2)] + input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 7)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + t146), 1, 2)]))/x2((uint16)3)) + ((input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 7)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + 1), 1, 2)] + (input[ramp((((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 7)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s) + 2), 1, 2)] + input[ramp(((((((blur_y.s0.y.y.y.__block_id_y*8) + blur_y.min.1) + 7)*input.stride.1) + t114) + blur_y.s0.x.v0.base.s), 1, 2)]))/x2((uint16)3))))/x2((uint16)3))
       }
      } else {
       let blur_y.s0.x.x.xi.base = min((blur_y.s0.x.x.x.__block_id_x*32), t128)
       let blur_y.s0.x.v0.base.s = min(((.__thread_id_x + blur_y.s0.x.x.xi.base)*2), t129)
       blur_y[ramp((blur_y.s0.x.v0.base.s + t131), 1, 2)] = ((((input[ramp((((blur_y.s0.x.v0.base.s + t130) + input.stride.1) + 1), 1, 2)] + (input[ramp((((blur_y.s0.x.v0.base.s + t130) + input.stride.1) + 2), 1, 2)] + input[ramp(((blur_y.s0.x.v0.base.s + t130) + input.stride.1), 1, 2)]))/x2((uint16)3)) + (((input[ramp((((blur_y.s0.x.v0.base.s + t130) + t146) + 1), 1, 2)] + (input[ramp((((blur_y.s0.x.v0.base.s + t130) + t146) + 2), 1, 2)] + input[ramp(((blur_y.s0.x.v0.base.s + t130) + t146), 1, 2)]))/x2((uint16)3)) + ((input[ramp(((blur_y.s0.x.v0.base.s + t130) + 1), 1, 2)] + (input[ramp(((blur_y.s0.x.v0.base.s + t130) + 2), 1, 2)] + input[ramp((blur_y.s0.x.v0.base.s + t130), 1, 2)]))/x2((uint16)3))))/x2((uint16)3))
       blur_y[ramp((blur_y.s0.x.v0.base.s + t133), 1, 2)] = ((((input[ramp((((blur_y.s0.x.v0.base.s + t132) + input.stride.1) + 1), 1, 2)] + (input[ramp((((blur_y.s0.x.v0.base.s + t132) + input.stride.1) + 2), 1, 2)] + input[ramp(((blur_y.s0.x.v0.base.s + t132) + input.stride.1), 1, 2)]))/x2((uint16)3)) + (((input[ramp((((blur_y.s0.x.v0.base.s + t132) + t146) + 1), 1, 2)] + (input[ramp((((blur_y.s0.x.v0.base.s + t132) + t146) + 2), 1, 2)] + input[ramp(((blur_y.s0.x.v0.base.s + t132) + t146), 1, 2)]))/x2((uint16)3)) + ((input[ramp(((blur_y.s0.x.v0.base.s + t132) + 1), 1, 2)] + (input[ramp(((blur_y.s0.x.v0.base.s + t132) + 2), 1, 2)] + input[ramp((blur_y.s0.x.v0.base.s + t132), 1, 2)]))/x2((uint16)3))))/x2((uint16)3))
       blur_y[ramp((blur_y.s0.x.v0.base.s + t135), 1, 2)] = ((((input[ramp((((blur_y.s0.x.v0.base.s + t134) + input.stride.1) + 1), 1, 2)] + (input[ramp((((blur_y.s0.x.v0.base.s + t134) + input.stride.1) + 2), 1, 2)] + input[ramp(((blur_y.s0.x.v0.base.s + t134) + input.stride.1), 1, 2)]))/x2((uint16)3)) + (((input[ramp((((blur_y.s0.x.v0.base.s + t134) + t146) + 1), 1, 2)] + (input[ramp((((blur_y.s0.x.v0.base.s + t134) + t146) + 2), 1, 2)] + input[ramp(((blur_y.s0.x.v0.base.s + t134) + t146), 1, 2)]))/x2((uint16)3)) + ((input[ramp(((blur_y.s0.x.v0.base.s + t134) + 1), 1, 2)] + (input[ramp(((blur_y.s0.x.v0.base.s + t134) + 2), 1, 2)] + input[ramp((blur_y.s0.x.v0.base.s + t134), 1, 2)]))/x2((uint16)3))))/x2((uint16)3))
       blur_y[ramp((blur_y.s0.x.v0.base.s + t137), 1, 2)] = ((((input[ramp((((blur_y.s0.x.v0.base.s + t136) + input.stride.1) + 1), 1, 2)] + (input[ramp((((blur_y.s0.x.v0.base.s + t136) + input.stride.1) + 2), 1, 2)] + input[ramp(((blur_y.s0.x.v0.base.s + t136) + input.stride.1), 1, 2)]))/x2((uint16)3)) + (((input[ramp((((blur_y.s0.x.v0.base.s + t136) + t146) + 1), 1, 2)] + (input[ramp((((blur_y.s0.x.v0.base.s + t136) + t146) + 2), 1, 2)] + input[ramp(((blur_y.s0.x.v0.base.s + t136) + t146), 1, 2)]))/x2((uint16)3)) + ((input[ramp(((blur_y.s0.x.v0.base.s + t136) + 1), 1, 2)] + (input[ramp(((blur_y.s0.x.v0.base.s + t136) + 2), 1, 2)] + input[ramp((blur_y.s0.x.v0.base.s + t136), 1, 2)]))/x2((uint16)3))))/x2((uint16)3))
       blur_y[ramp((blur_y.s0.x.v0.base.s + t139), 1, 2)] = ((((input[ramp((((blur_y.s0.x.v0.base.s + t138) + input.stride.1) + 1), 1, 2)] + (input[ramp((((blur_y.s0.x.v0.base.s + t138) + input.stride.1) + 2), 1, 2)] + input[ramp(((blur_y.s0.x.v0.base.s + t138) + input.stride.1), 1, 2)]))/x2((uint16)3)) + (((input[ramp((((blur_y.s0.x.v0.base.s + t138) + t146) + 1), 1, 2)] + (input[ramp((((blur_y.s0.x.v0.base.s + t138) + t146) + 2), 1, 2)] + input[ramp(((blur_y.s0.x.v0.base.s + t138) + t146), 1, 2)]))/x2((uint16)3)) + ((input[ramp(((blur_y.s0.x.v0.base.s + t138) + 1), 1, 2)] + (input[ramp(((blur_y.s0.x.v0.base.s + t138) + 2), 1, 2)] + input[ramp((blur_y.s0.x.v0.base.s + t138), 1, 2)]))/x2((uint16)3))))/x2((uint16)3))
       blur_y[ramp((blur_y.s0.x.v0.base.s + t141), 1, 2)] = ((((input[ramp((((blur_y.s0.x.v0.base.s + t140) + input.stride.1) + 1), 1, 2)] + (input[ramp((((blur_y.s0.x.v0.base.s + t140) + input.stride.1) + 2), 1, 2)] + input[ramp(((blur_y.s0.x.v0.base.s + t140) + input.stride.1), 1, 2)]))/x2((uint16)3)) + (((input[ramp((((blur_y.s0.x.v0.base.s + t140) + t146) + 1), 1, 2)] + (input[ramp((((blur_y.s0.x.v0.base.s + t140) + t146) + 2), 1, 2)] + input[ramp(((blur_y.s0.x.v0.base.s + t140) + t146), 1, 2)]))/x2((uint16)3)) + ((input[ramp(((blur_y.s0.x.v0.base.s + t140) + 1), 1, 2)] + (input[ramp(((blur_y.s0.x.v0.base.s + t140) + 2), 1, 2)] + input[ramp((blur_y.s0.x.v0.base.s + t140), 1, 2)]))/x2((uint16)3))))/x2((uint16)3))
       blur_y[ramp((blur_y.s0.x.v0.base.s + t143), 1, 2)] = ((((input[ramp((((blur_y.s0.x.v0.base.s + t142) + input.stride.1) + 1), 1, 2)] + (input[ramp((((blur_y.s0.x.v0.base.s + t142) + input.stride.1) + 2), 1, 2)] + input[ramp(((blur_y.s0.x.v0.base.s + t142) + input.stride.1), 1, 2)]))/x2((uint16)3)) + (((input[ramp((((blur_y.s0.x.v0.base.s + t142) + t146) + 1), 1, 2)] + (input[ramp((((blur_y.s0.x.v0.base.s + t142) + t146) + 2), 1, 2)] + input[ramp(((blur_y.s0.x.v0.base.s + t142) + t146), 1, 2)]))/x2((uint16)3)) + ((input[ramp(((blur_y.s0.x.v0.base.s + t142) + 1), 1, 2)] + (input[ramp(((blur_y.s0.x.v0.base.s + t142) + 2), 1, 2)] + input[ramp((blur_y.s0.x.v0.base.s + t142), 1, 2)]))/x2((uint16)3))))/x2((uint16)3))
       blur_y[ramp((blur_y.s0.x.v0.base.s + t145), 1, 2)] = ((((input[ramp((((blur_y.s0.x.v0.base.s + t144) + input.stride.1) + 1), 1, 2)] + (input[ramp((((blur_y.s0.x.v0.base.s + t144) + input.stride.1) + 2), 1, 2)] + input[ramp(((blur_y.s0.x.v0.base.s + t144) + input.stride.1), 1, 2)]))/x2((uint16)3)) + (((input[ramp((((blur_y.s0.x.v0.base.s + t144) + t146) + 1), 1, 2)] + (input[ramp((((blur_y.s0.x.v0.base.s + t144) + t146) + 2), 1, 2)] + input[ramp(((blur_y.s0.x.v0.base.s + t144) + t146), 1, 2)]))/x2((uint16)3)) + ((input[ramp(((blur_y.s0.x.v0.base.s + t144) + 1), 1, 2)] + (input[ramp(((blur_y.s0.x.v0.base.s + t144) + 2), 1, 2)] + input[ramp((blur_y.s0.x.v0.base.s + t144), 1, 2)]))/x2((uint16)3))))/x2((uint16)3))
      }
     }
    }
   }
  }
  _halide_buffer_set_device_dirty(((halide_buffer_t *))blur_y.buffer, (uint1)1)
 }
}
}


